import sqlite3
from telebot import TeleBot, types
import time

Token = '7696737315:AAGY4roHl4TfSHONi6Wk0nbo-FbQrSDWoG8'
bot = TeleBot(Token)

temp_storage = {}
photos_to_delete = {}  # –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('photo_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS photos
        (file_id TEXT PRIMARY KEY,
         description TEXT,
         upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         chat_id INTEGER)
    ''')

    conn.commit()
    conn.close()

def save_to_db(file_id, description, chat_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('photo_bot.db')
    cursor = conn.cursor()

    cursor.execute('INSERT INTO photos (file_id, description, chat_id) VALUES (?, ?, ?)',
                    (file_id, description, chat_id))

    conn.commit()
    conn.close()

def search_in_db(query, chat_id):
    """–ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('photo_bot.db')
    cursor = conn.cursor()

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"Searching for user {chat_id}: '{query}'")

    cursor.execute('SELECT file_id, description FROM photos WHERE LOWER(description) LIKE ? AND chat_id = ?',
                    (f'%{query.lower()}%', chat_id))

    results = cursor.fetchall()

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"Found {len(results)} results for user {chat_id}")
    for r in results:
        print(f"  - {r[0]}: {r[1]}")

    conn.close()

    return results

def delete_from_db(file_id, chat_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ file_id –∏ chat_id"""
    conn = sqlite3.connect('photo_bot.db')
    cursor = conn.cursor()

    cursor.execute('DELETE FROM photos WHERE file_id = ? AND chat_id = ?', (file_id, chat_id))
    deleted = cursor.rowcount > 0

    conn.commit()
    conn.close()

    return deleted

@bot.message_handler(commands=['start'])
def start(message):
    answer = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n"
        "2. –ò—Å–∫–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        "4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /all –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ.\n"
        "5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ.\n"
        "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /clear_all –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!).\n"
    )
    bot.send_message(message.chat.id, text=answer, parse_mode='html')

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if not message.photo:
        bot.send_message(message.chat.id, "Failed to receive the photo. Please try again.")
        return

    temp_storage[message.chat.id] = message.photo[-1].file_id
    bot.send_message(message.chat.id, "Well done. Write a description for the photo.")
    bot.register_next_step_handler(message, save_photo_description)

def save_photo_description(message):
    if not message.text:
        bot.send_message(message.chat.id, "Description must be text!")
        return

    file_id = temp_storage.get(message.chat.id)
    if not file_id:
        bot.send_message(message.chat.id, "No photo found. Please try again.")
        return

    try:
        description = message.text
        save_to_db(file_id, description, message.chat.id)
        bot.send_message(message.chat.id, "Photo and description have been saved!")
        print(f"Saved to DB: {file_id} -> {description} for user {message.chat.id}")

        del temp_storage[message.chat.id]
    except Exception as e:
        bot.send_message(message.chat.id, "An error occurred while saving the photo. Please try again.")
        print(f"Error: {e}")

@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def search_photos(message):
    query = message.text.lower()
    bot.send_message(message.chat.id, f"üîç Searching for your photos with keyword: '{query}'")

    results = search_in_db(query, message.chat.id)

    if not results:
        bot.send_message(message.chat.id, "No photos found for your query. Try another keyword.")
    else:
        bot.send_message(message.chat.id, f"Found {len(results)} photos:")
        for file_id, description in results:
            bot.send_photo(message.chat.id, file_id, caption=f"Found photo with description: {description}")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    conn = sqlite3.connect('photo_bot.db')
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM photos WHERE chat_id = ?', (message.chat.id,))
    total_photos = cursor.fetchone()[0]

    cursor.execute('SELECT upload_date FROM photos WHERE chat_id = ? ORDER BY upload_date DESC LIMIT 1', (message.chat.id,))
    last_upload = cursor.fetchone()

    conn.close()

    stats = f"üìä Your statistics:\n\n" \
            f"Total photos: {total_photos}\n" \
            f"Last upload: {last_upload[0] if last_upload else 'No uploads yet'}"

    bot.send_message(message.chat.id, stats)

@bot.message_handler(commands=['all'])
def show_all(message):
    conn = sqlite3.connect('photo_bot.db')
    cursor = conn.cursor()

    cursor.execute('SELECT file_id, description FROM photos WHERE chat_id = ?', (message.chat.id,))
    results = cursor.fetchall()

    conn.close()

    if not results:
        bot.send_message(message.chat.id, "You haven't uploaded any photos yet.")
    else:
        bot.send_message(message.chat.id, f"Showing all {len(results)} your photos:")
        for file_id, description in results:
            bot.send_photo(message.chat.id, file_id, caption=description)

@bot.message_handler(commands=['delete'])
def start_delete(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, show_photos_to_delete)

def show_photos_to_delete(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = message.text.lower()
    results = search_in_db(query, message.chat.id)

    if not results:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos_to_delete[message.chat.id] = {}

    bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    for i, (file_id, description) in enumerate(results, 1):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–æ–º–µ—Ä–æ–º
        photos_to_delete[message.chat.id][i] = file_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –Ω–æ–º–µ—Ä–æ–º
        bot.send_photo(
            message.chat.id,
            file_id,
            caption=f"–§–æ—Ç–æ #{i}: {description}"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–¥–∞–ª–µ–Ω–∏—é
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
    )
    bot.register_next_step_handler(message, confirm_delete)

def confirm_delete(message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        if message.chat.id in photos_to_delete:
            del photos_to_delete[message.chat.id]
        return

    try:
        photo_number = int(message.text)
        user_photos = photos_to_delete.get(message.chat.id, {})

        if photo_number not in user_photos:
            bot.send_message(message.chat.id, f"–§–æ—Ç–æ —Å –Ω–æ–º–µ—Ä–æ–º {photo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞':")
            bot.register_next_step_handler(message, confirm_delete)
            return

        file_id = user_photos[photo_number]

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        markup.add('–î–∞, —É–¥–∞–ª–∏—Ç—å', '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞')

        bot.send_message(
            message.chat.id,
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ #{photo_number}?",
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        photos_to_delete[message.chat.id]['selected'] = photo_number

        bot.register_next_step_handler(message, perform_delete)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
        bot.register_next_step_handler(message, confirm_delete)

def perform_delete(message):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    if message.text == '–î–∞, —É–¥–∞–ª–∏—Ç—å':
        user_photos = photos_to_delete.get(message.chat.id, {})
        selected = user_photos.get('selected')

        if selected and selected in user_photos:
            file_id = user_photos[selected]

            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if delete_from_db(file_id, message.chat.id):
                bot.send_message(
                    message.chat.id,
                    f"–§–æ—Ç–æ #{selected} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                    reply_markup=types.ReplyKeyboardRemove()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ #{selected}.",
                    reply_markup=types.ReplyKeyboardRemove()
                )
        else:
            bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=types.ReplyKeyboardRemove()
            )
    else:
        bot.send_message(
            message.chat.id,
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )

    # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.chat.id in photos_to_delete:
        del photos_to_delete[message.chat.id]

@bot.message_handler(commands=['clear_all'])
def clear_all_photos(message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–∞, —É–¥–∞–ª–∏—Ç—å –í–°–ï –ú–û–ò', '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞')

    bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –°–í–û–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=markup
    )

    bot.register_next_step_handler(message, confirm_clear_all)

def confirm_clear_all(message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == '–î–∞, —É–¥–∞–ª–∏—Ç—å –í–°–ï –ú–û–ò':
        conn = sqlite3.connect('photo_bot.db')
        cursor = conn.cursor()

        cursor.execute('DELETE FROM photos WHERE chat_id = ?', (message.chat.id,))
        deleted_count = cursor.rowcount

        conn.commit()
        conn.close()

        bot.send_message(
            message.chat.id,
            f"–í–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )

if __name__ == "__main__":
    print("Initializing database...")
    init_database()
    print("Bot is running!")
    bot.infinity_polling()
